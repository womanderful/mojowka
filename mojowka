#!/usr/bin/env perl

=head1 NAME

mojowka

=head1 DESCRIPTION

mojowka - is a L<Mojolicious::Lite> based lightweight wiki.

=head1 AUTHOR

Alexander Sapozhnikov
L<http://shoorick.ru/>
L<< E<lt>shoorick@cpan.orgE<gt> >>
2000-2015

=head1 LICENSE

This program is free software, you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut

use utf8;
use Mojolicious::Lite;
use Locale::TextDomain qw( mojowka locale );
no warnings 'redefine';

use File::Basename 'basename';
use File::Path     'mkpath';
use Mojo::ByteStream 'b';
use Mojo::Log;
use Text::Textile;

our $VERSION=0.05;

my $log = Mojo::Log->new;
my $DATADIR = $ENV{'MOJOWKA_DATADIR'} || '/var/lib/mojowka';
our $txt = Text::Textile->new; $txt->charset('utf-8');
my $index_text = <<'EOF';
Welcome to mojowka-didi

Mojowka-didi is a small and simple wiki implementation based on mojowka (which in turn is based on Mojolicious::Lite).

There is no setup needed. No database or user authentication.

It's intended for personal note-taking, "to do" lists, and any other uses you can think of. You can write articles in plain text or markdown.
EOF

# i18n
## https://github.com/mojolicious/mojo/commit/503dec92a504a68165d62ad4cc22f5c05f5e6a9a#diff-58aa583130bcb90490b462f556b92f86
app->types->type(html => 'text/html;charset=utf-8');
app->renderer->encoding('utf-8');
app->hook(
  before_dispatch => sub {
    shift->req->default_charset('utf-8')->url->query->charset('utf-8');
  }
);
plugin 'textdomain' => {
    'domain'      => 'mojowka',
    'search_dirs' => [ 'locale' ],
    'available_languages' => [ 'en', 'ru' ],
    'default_language'    => 'en',
};

app->hook( 'before_routes' => sub {
    my $self = shift;
    $self->set_language( $self->session( 'language' ) || $self->detect_language );
});


# Routes

get '/set_language'           => \&set_language;
get '/set_language/:language' => \&set_language;

post '/preview' => sub {
    my $self = shift;
    my $text = $self->param('article') || return;
    $self->render( 'text' => markup( $text ) );
};

get '/sitemap' => sub {
    my $self = shift;

    my $rows = [ grep { 'index' ne $_ } map { basename $_ } glob "$DATADIR/*" ];

    foreach my $row ( @$rows ) {
        $row = b( $row )->decode('UTF-8')->to_string;
    }

    return $self->render(
        'rows'             => $rows,
    );
};

get '/search/:query'                   => \&search;
get '/search'                          => \&search;
any '/edit/#title'                     => \&edit_article;
any '/delete/#title'                   => \&delete_article;

# Other requests
under sub { 1 };
get '/#title'                          => \&get_article;
get '/'                                => \&get_article;

app->types->type( 'html' => 'text/html; charset=utf-8' );
app->secrets([ 'mojoWka' ]);
app->start( @ARGV ? @ARGV : 'daemon' );


=head1 FUNCTIONS

=head2 markup

Convert lightweight markup into HTML

=cut

sub markup {
    local $_ = shift || return;

    # [[internal links]]
    s{
        \[\[
            (([^\]\|]+)\|)?
             ([^\]\|]+)
        \]\]
    }{
        my $link  = $2 || $3;
           $link  =~ tr/ /_/;
        my $text  = $3;
        sprintf q{"%s":/%s}, $text, $link;
    }gex;

#    $log->debug("Textiling of $_");
    return $txt->process( $_ );

}


=head2 create_index

Create the landing page

=cut

sub create_index {
    open my $fd, '>', "$DATADIR/index" or do {
        $log->warn ("open: '$DATADIR/index': $!");
        return;
    };
    print $fd $index_text or do {
        $log->warn ("write: '$DATADIR/index': $!");
        return;
    };
    close $fd;
    return 1;
}


=head2 get_article

Get article by title

=cut

sub get_article {
    my $self  = shift;
    my $title = $self->param('title') || '';

    if (!$title) {
        $log->debug ('no title');
        if (!-e "$DATADIR/index") {
            $log->debug ('index page does not exist');
            if (!create_index) {
                return $self->render(
                    'template' => 'internal_server_error',
                    'action'   => 'opening or writing',
                    'status'   => 500,
                );
            }
            $log->debug ('index page created');
        }
        return $self->redirect_to( "/index" );
    }

    $title = basename $title;

    my $file = "$DATADIR/$title";
    $log->debug ("file is '$file'");

    return $self->render(
        'template' => 'not_found',
    ) unless -e $file;

    my $contents;
    open my $fd, '<', $file or do {
        $log->warn ("open: '$file': $!");
        return $self->render(
            'template' => 'internal_server_error',
            'action'   => 'opening',
            'status'   => 500,
        );
    };
    { local $/; $contents = <$fd>; }
    close $fd;

    $self->render(
        'content'   => markup( $contents ),
        'title'  => $title,
        'layout' => 'default',
        'show_edit' => 1,
    );
}


=head2 edit_article

Draw editing form for article found by its ID
and process this form.

=cut

sub edit_article {
    my $self = shift;
    my $article_title   = $self->param('title') || '';
    my $article_content = $self->param('article');
    $article_title = basename $article_title;

    my $file = "$DATADIR/$article_title";
    $log->debug ("file is '$file'");

    if ( $self->req->method eq 'POST' ) {
        my @errors = ();

        unless ( $article_content ) {
            return $self->render(
                'errors'            => [ __ 'Page content can not be empty' ],
                'template'          => 'edit_article',
                'title'             => b( __ 'Edit page' )->decode( 'UTF-8' ),
                'article_content'   => $article_content,
                'article_title'     => b( $article_title )->decode( 'UTF-8' ),
            );
        }

        open my $fd, '>', $file or do {
            $log->warn ("open: '$file': $!");
            push ( @errors, __ 'Can not save: open' );
            goto END;
        };
        $article_content .= "\x0d\x0a" if "\x0a" ne substr $article_content, -1;
        print $fd $article_content or do {
            $log->warn ("write: '$file': $!");
            push ( @errors, __ 'Can not save: write' );
            goto END;
        };
        close $fd;

        $self->flash( 'message' => __ 'Changes were saved' );
        $self->redirect_to( "/$article_title" );

        END:
        return $self->render(
            'errors'            => [ @errors ],
            'template'          => 'edit_article',
            'title'             => b( __ 'Errors occured' )->decode( 'UTF-8' ),
            'article_content'   => $article_content,
            'article_title'     => b( $article_title )->decode( 'UTF-8' ),
        );

    }

    my $contents = '';
    if ( -e $file ) { # existing record
        open my $fd, '<', $file or do {
            $log->warn ("open: '$file': $!");
            return $self->render(
                'template' => 'internal_server_error',
                'action'   => 'opening',
                'status'   => 500,
            );
        };
        { local $/; $contents = <$fd>; }
        close $fd;
    }

    return $self->render(
        'template'          => 'edit_article',
        'title'             => b( __ 'Edit page' )->decode( 'UTF-8' ),
        'article_content'   => b( $contents )->decode( 'UTF-8' ),
        'article_title'     => b( $article_title )->decode( 'UTF-8' ),
    );
}


=head2 delete_article

Delete article specified by title

=cut

sub delete_article {
    my $self = shift;
    my $title = basename $self->param('title') || return;

    my $file = "$DATADIR/$title";
    $log->debug ("file is '$file'");

    return $self->render(
        'template' => 'not_found',
    ) unless -e $file;

    if (unlink $file) {
        $log->debug ("'$file' successfully unlinked");
        $self->flash( 'message' => __ 'Page was deleted' );
        return $self->redirect_to( '/' );
    } else {
        $log->warn ("unlink: '$file': $!");
        return $self->render(
            'template' => 'internal_server_error',
            'action'   => 'deleting',
            'status'   => 500,
        );
    }
}

=head2 search

Search pages by title and content

=cut

sub search {
    my $self = shift;

    my $title = __ 'Search';
    my $query = $self->param('query') || '';
    my $rows  = [];

    $log->debug ("search query is '$query'");
    eval {
        'test' =~ qr/$query/;
    };
    if ($@ and 'Eval-group not allowed at runtime' eq substr $@, 0, 33) {
        $log->warn ("eval: $@");
        $self->flash( 'message' => __ 'Invalid regular expression' );
        return $self->redirect_to( '/search' );
    }

    if ( $query ) {
        my @files = map { basename $_ } glob "$DATADIR/*";
        $log->debug (sprintf 'performing search on %d files', scalar @files);
        foreach my $f (@files) {
            open my $fd, '<', "$DATADIR/$f" or do {
                $log->warn ("open: '$DATADIR/$f': $!");
                next;
            };
            my $contents; { local $/; $contents = <$fd>; }
            close $fd;
            if ($f =~ qr/$query/i or $contents =~ qr/$query/i) {
                push @$rows, $f;
            }
        }

        if (1 == @$rows) {
            $log->debug ('unique match found');
            $self->flash( 'message' => __ 'Exact matching found' );   ## this can't currently be seen, as the template for /$title doesn't show it
            return $self->redirect_to( "/$rows->[0]" );
        }

        $title = __nx
            'Found {count} page',
            'Found {count} pages',
            scalar @$rows,
            'count' => scalar @$rows;

        foreach my $row ( @$rows ) {
            $row = b( $row )->decode('UTF-8');
        }
    }

    return $self->render(
        'template'         => 'search',
        'query'            => $query,
        'rows'             => $rows,
        'title'            => b( $title )->decode('UTF-8'),
    );
}


=head2  set_language

Set preferred language.
Called as set_language/I<ln> or as set_language?language=I<ln>, where I<ln> is language code.
In version 0.0.3 available 2 languages: English and Russian.

=cut

sub set_language {
    my $self = shift;
    $self->session( 'language' => $self->param( 'language' ) );
    $self->redirect_to( $self->req->headers->referrer || '/' );
}

__DATA__

@@ title.html.ep
% layout 'default';
%== $content


@@ sitemap.html.ep
% layout 'default', 'title' => __ 'Sitemap';
<ul>
% for my $row ( @$rows ) {
%   my $link = $row;
    <li><a href="<%= url_for "/$link" %>"><%= $row %></a></li>
% }
</ul>
<h2><%= __ 'Special pages' %></h2>
<ul>
<li><a href="<%= url_for '/search'  %>"><%= __ 'Search' %></a></li>
<li><a href="<%= url_for '/sitemap' %>"><%= __ 'Sitemap' %></a></li>
</ul>


@@ search.html.ep
% layout 'default';
<form action="<%= url_for '/search' %>">
<input type="text" name="query" value="<%= $query %>">
<input type="submit" value="<%= __ 'Find' %>">
</form>
<ol>
% for my $row ( @$rows ) {
%   my $link = $row;
    <li><a href="<%= url_for "/$link" %>"><%= $row %></a></li>
% }
</ol>


@@ not_found.html.ep
% layout 'error';
% stash 'title' => __ 'Not Found - ERROR 404';
<h1><%= __ 'Not found' %></h1><p><%= __ 'Document you requested was not found.' %></p>
<ul>
% my $article_title = param 'title';
<li><a href="<%= url_for "/search/$article_title" %>"><%== __x  'Search for &ldquo;{title}&rdquo;', 'title' => $article_title %></a></li>
<li><a href="<%= url_for "/edit/$article_title" %>"><%== __x 'Create page &ldquo;{title}&rdquo;', 'title' => $article_title %></a></li>
</ul>


@@ internal_server_error.html.ep
% layout 'error';
% stash 'title' => __ 'ERROR 500';
% my $action = stash 'action';
<h1><%= __ 'Error' %></h1><p><%= __ "Error $action the document you requested." %></p>
<ul>
% my $article_title = param 'title';
<li><a href="<%= url_for "/search/$article_title" %>"><%== __x  'Search for &ldquo;{title}&rdquo;', 'title' => $article_title %></a></li>
</ul>


@@ edit_article.html.ep
% layout 'default';
% use Mojo::ByteStream 'b';
%= include 'jquery';
<script type="text/javascript" src="<%= url_for '/jquery-ui-1.8.11.custom.min.js' %>"></script>
<script type="text/javascript" src="<%= url_for '/jquery.caret.1.02.min.js' %>"></script>
<script type="text/javascript">
function wrap(prefix, suffix) {
    with ( $('#article') ) {
        var inner = caret().text;
        var start = caret().start;
        var end   = caret().end;
        val( caret().replace( prefix + inner + suffix ) );
        caret({ start: start+prefix.length, end:end+prefix.length });
    }
    return false;
}

$(document).ready(function() {

    // Tie onclick action to all .ajax links
    $('a#preview_link').click(function() {
        $.ajax({
            url:        '<%= url_for '/preview' %>',
            type:       'post',
            data:       { article: $('#article').val() },
            dataType:   'html',
            success:    function(data, textStatus) {
                $('div#preview_area').html(data);
                $('div#preview_area').show();
            },
            error:      function() {
                alert('Can not preview');
            }
        });
        return false;
    });
    $('#article').resizable({
        handles: 's'
    });

    $('#btn_bold').click(function(){ wrap('*', '*') });
    $('#btn_italic').click(function(){ wrap('_', '_') });
    $('#btn_h1').click(function(){ wrap('\n\nh1. ', '\n\n') });
    $('#btn_h2').click(function(){ wrap('\n\nh2. ', '\n\n') });
    $('#btn_h3').click(function(){ wrap('\n\nh3. ', '\n\n') });
    $('#btn_ul').click(function(){ wrap('\n\n* ', '\n\n') });
    $('#btn_ol').click(function(){ wrap('\n\n# ', '\n\n') });
    $('#article').keypress(function(e){
        switch (e.which) {
            case 2: wrap('*', '*'); break;
            case 9: wrap('_', '_'); break;
        }
    });
});
</script>
<style type="text/css">
.ui-resizable { position: relative}
.ui-resizable-handle { position: absolute;font-size: 0.1px;z-index: 99999; display: block;}
.ui-resizable-disabled .ui-resizable-handle, .ui-resizable-autohide .ui-resizable-handle { display: none; }
.ui-resizable-s { cursor: s-resize; height: 20px; width: 100%; bottom: 11px; left: 0;background:url(<%= url_for '/grip.gif' %>) no-repeat right top;margin:0 -4px }
#toolbar a { margin: 0 2px; padding: 0 0.3em; border: 1px outset #999; text-decoration:none; color: #000 }
button { background:url(<%= url_for '/toolbar.gif' %>) no-repeat 0 50%;width:22px;height:22px;text-indent:-9999em;border:1px outset #999;-moz-border-radius:2px;border-radius:3px}
button:hover{border-color:#69c}
#btn_italic { background-position:  -20px 50% }
#btn_h1 { background-position:  -40px 50% }
#btn_h2 { background-position:  -60px 50% }
#btn_h3 { background-position:  -80px 50% }
#btn_ul { background-position: -100px 50% }
#btn_ol { background-position: -120px 50% }
</style>

% if ( my $errors = stash 'errors' ) {
    <ul id="errors">
%   for my $error ( @$errors ) {
        <li><%= b( $error )->decode('UTF-8')->to_string %></li>
%   }
    </ul>
% }

<form method="post" action="<%= url_for "/edit/$article_title" %>">
<dl>
<dt><%= __ 'Title' %></dt>
<dd><input type="text" name="title" value="<%= $article_title %>" readonly=""></dd>
<dt><%= __ 'Content' %></dt>
<dd><span id="toolbar">
<button type="button" id="btn_bold" title="<%= __ 'Bold (Ctrl+B)' %>"><%= __ 'Bold' %></button>
<button type="button" id="btn_italic" title="<%= __ 'Italic (Ctrl+I)' %>"><%= __ 'Italic' %></button>
<button type="button" id="btn_h1" title="<%= __ 'Header 1' %>"><%= __ 'Header 1' %></button>
<button type="button" id="btn_h2" title="<%= __ 'Header 2' %>"><%= __ 'Header 2' %></button>
<button type="button" id="btn_h3" title="<%= __ 'Header 3' %>"><%= __ 'Header 3' %></button>
<button type="button" id="btn_ul" title="<%= __ 'Unordered list item' %>"><%= __ 'Unordered list item' %></button>
<button type="button" id="btn_ol" title="<%= __ 'Ordered list item' %>"><%= __ 'Ordered list item' %></button>
</span>
<br><textarea name="article" id="article"><%= $article_content %></textarea>
<br><a href="http://search.cpan.org/perldoc?Text::Textile#SYNTAX"><%= __ 'textile syntax' %></a>
</dd>
</dl>
<input type="submit" value="<%= __ 'Save' %>">
<a href="#" id="preview_link"><%= __ 'Preview' %></a>
    <a href="<%= url_for "/delete/$article_title" %>" id="delete_link"
    onclick="return confirm('<%= __ 'Do you really want to delete this page?' %>')"><%= __ 'Delete page' %></a>
</form>
<div id="preview_area"></div>


@@ layouts/error.html.ep
<!DOCTYPE html>
<html>
    <head>
        <title><%= $title || __ 'ERROR' %></title>
        <style type="text/css">body{background:#fec;color:#000}h1{color:#900}</style>
%# Maybe You can replace next line
%# with <link rel="stylesheet" type="text/css" link="style.css">
%# when you can inflate files. I can't :-(
    <style type="text/css"><%= include 'style.css' %></style>
    </head>
    <body>
%= include 'menu';
        <%= content %>
    </body>
</html>


@@ layouts/default.html.ep
% use Mojo::ByteStream 'b';
<!DOCTYPE html>
<html>
    <head><title><%= $title || __ 'Welcome'%></title>
    <link rel="shortcut icon" href="<%= url_for '/favicon.ico' %>">
%# Maybe You can replace next line
%# with <link rel="stylesheet" type="text/css" link="style.css">
%# when you can inflate files. I can't :-(
    <style type="text/css"><%= include 'style.css' %></style>
    </head>
    <body>
%= include 'menu';
% if ( my $message = flash 'message' ) {
        <div id="message"><%= b( $message )->decode('UTF-8')->to_string %></div>
% }

    <h1><%= $title %></h1>
    <%= content %>
    </body>
</html>

@@ jquery.html.ep
<%= javascript 'http://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js' %>
<%= javascript begin %>
    if (typeof jQuery == 'undefined') {
      var e = document.createElement('script');
      e.src = '/js/jquery.js';
      e.type = 'text/javascript';
      document.getElementsByTagName("head")[0].appendChild(e);
    }
<% end %>

@@ menu.html.ep
<ul id="menu"><li><a href="<%= url_for '/index' %>"><%= __ 'Main page' %></a></li><li><a
    href="<%= url_for '/sitemap' %>"><%= __ 'Sitemap' %></a></li>
    <% if (stash 'show_edit') { %><li><a href="<%= url_for "/edit/$title" %>">Edit</a></li><% } %>
    <li><form
    action="<%= url_for '/set_language' %>" onchange="this.submit()"><select name="language"><option value=""><%= __ 'Language' %></option><option value="en">English</option><option value="ru">Русский</option></select></form></li><li><form
    action="<%= url_for '/search' %>"><input type="text" name="query"></form></li></ul>

@@ style.css.html.ep
body {
    background: #fff;
    color:      #000;
}

h1, h2, h3, h4, h5, h6 {
    font-family: sans-serif;
}

@media screen {
    body {
        margin:     0;
        padding:    1em;
    }

    h1 {
        color:      #223;
        font-size:  140%;
    }

    h2 {
        color:      #335;
        font-size:  120%;
    }

    h3 {
        color:      #446;
        font-size:  100%;
    }

    #message {
        border:     1px solid #fc0;
        background: #fec;
        padding:    1em;
    }

    #logged {
        float:      right;
        display:    inline;
        margin:     0;
    }

    #menu {
        list-style: none;
        margin:     -1.25em -1.25em 1em;
        padding:    0;
        height:     2em;
        font-size:  80%;
        background-color: #e0e7ee;
    }

    #menu li {
        display:    inline;
        padding:    0;
    }

    #menu a {
        padding:    0.3em 1em 0;
        height:     1.7em;
        display:    block;
        float:      left;
    }

    #menu a:hover {
        background-color: #8ab;
        color:      #000;
        text-decoration:        none;
    }

    #menu form {
        display:    inline;
        float:      right;
    }

    #menu input {
        background: #fff url(<%= url_for '/bg-search.png' %>) no-repeat 100% 50%;
        color: #333;
        font-family: 'DejaVu Sans Mono','Liberation Mono',monospaced;
    }

}

#logged li {
    display:    inline;
    background: #eee;
    border:     1px solid #ccc;
    padding:    0.1em 0.5em;
}

#errors {
    background: #fdc;
    border:     1px solid #c00;
}

dd textarea {
    width:  100%;
    height: 7em;
}

#preview_area {
    border: 1px solid #900;
    margin-top: 1em;
    padding: 1em;
    background: #eee;
    display: none;
}

#preview_link {
    color:      #656;
    text-decoration: none;
    border-bottom: 1px dashed #878;
}

#delete_link {
    color:      #900;
    float:      right;
}

@media print {
    body {
        font-family: serif;
    }

    #logged, #message, #menu {
        display: none;
    }
}


